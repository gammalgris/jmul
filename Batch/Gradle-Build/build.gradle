
apply plugin: 'java'


task printProps {
	doLast {
		println version
	}
}


File targetDir = getProject().getBuildDir()

task copyBatchFiles(type: Copy) {
	from '../../Utilities/Document-Binary-Tests/create-testdata-binary.bat'
	from '../../Utilities/Document-CSV-Tests/create-testdata-csv.bat'
	from '../../Utilities/Document-Text-Tests/create-testdata-text.bat'
	from '../../Utilities/IO-Tests/create-testdata-io.bat'
	from '../../Utilities/XML-Tests/create-testdata-xml.bat'
	into targetDir
}


task executeBatchFile01(type: Exec) {
	workingDir = targetDir
	commandLine = ['cmd', '/c', 'create-testdata-binary.bat']
}

task executeBatchFile02(type: Exec) {
	workingDir = targetDir
	commandLine = ['cmd', '/c', 'create-testdata-csv.bat']
}

task executeBatchFile03(type: Exec) {
	workingDir = targetDir
	commandLine = ['cmd', '/c', 'create-testdata-text.bat']
}

task executeBatchFile04(type: Exec) {
	workingDir = targetDir
	commandLine = ['cmd', '/c', 'create-testdata-io.bat']
}

task executeBatchFile05(type: Exec) {
	workingDir = targetDir
	commandLine = ['cmd', '/c', 'create-testdata-xml.bat']
}


task preBuild {
	dependsOn copyBatchFiles
	dependsOn executeBatchFile01
	dependsOn executeBatchFile02
	dependsOn executeBatchFile03
	dependsOn executeBatchFile04
	dependsOn executeBatchFile05
}


build.dependsOn preBuild

sourceCompatibility = 1.7
targetCompatibility = 1.7

sourceSets {

	main {
		java {
			srcDirs = [ '../../Utilities/Checks/src',
						'../../Utilities/Component/src',
						'../../Utilities/Concurrent/src',
						'../../Utilities/Constants/src',
						'../../Utilities/Document/src',
						'../../Utilities/Document-Binary/src',
						'../../Utilities/Document-CSV/src',
						'../../Utilities/Document-Text/src',
						'../../Utilities/Formula/src',
						'../../Utilities/IO/src',
						'../../Utilities/Logging/src',
						'../../Utilities/Math/src',
						'../../Utilities/Measures/src',
						'../../Utilities/Metainfo/src',
						'../../Utilities/Misc/src',
						'../../Utilities/Network/src',
						'../../Utilities/Persistence/src',
						'../../Utilities/Reflection/src',
						'../../Utilities/String/src',
						'../../Utilities/Time/src',
						'../../Utilities/Transformation/src',
						'../../Utilities/Transformation-XML/src',
						'../../Utilities/Web/src',
						'../../Utilities/XML/src'
					]
		}

		resources {
			srcDirs = [ '../../Utilities/Concurrent/properties',
						'../../Utilities/Document/properties',
						'../../Utilities/Measures/properties',
						'../../Utilities/Network/properties',
						'../../Utilities/Persistence/properties',
						'../../Utilities/Reflection/properties',
						'../../Utilities/Transformation/properties',
						'../../Utilities/Transformation-XML/properties',
						'../../Utilities/Version/properties',
						'../../Utilities/Web/properties'
					]
		}
	}

	test {
		java {
			srcDirs = [ '../../Utilities/Component-Tests/src',
						'../../Utilities/Constants-Tests/src',
						'../../Utilities/Document-Binary-Tests/src',
						'../../Utilities/Document-CSV-Tests/src',
						'../../Utilities/Document-Text-Tests/src',
						'../../Utilities/Formula-Tests/src',
						'../../Utilities/Helper-Tests/src',
						'../../Utilities/IO-Tests/src',
						'../../Utilities/Math-Tests/src',
						'../../Utilities/Measures-Tests/src',
						'../../Utilities/Misc-Tests/src',
						'../../Utilities/Network-Tests/src',
						'../../Utilities/Persistence-Tests/src',
						'../../Utilities/Reflection-Tests/src',
						'../../Utilities/String-Tests/src',
						'../../Utilities/Test/src',
						'../../Utilities/Test-Base/src',
						'../../Utilities/Time-Tests/src',
						'../../Utilities/Transformation-Tests/src',
						'../../Utilities/Transformation-XML-Tests/src',
						'../../Utilities/Web-Tests/src',
						'../../Utilities/XML-Tests/src'
					]
		}

		resources {
			srcDirs = [ '../../Utilities/Persistence-Tests/properties',
						'../../Utilities/Transformation-Tests/properties'
					]
		}
	}

}

repositories {
	flatDir {
		dirs '../../Libraries/JUnit', '../../Libraries/Commons Lang'
	}
}

dependencies {
	compile fileTree(dir: '../../Libraries/Commons Lang', include: '*.jar')
	testCompile fileTree(dir: '../../Libraries/JUnit', include: '*.jar')
}


jar.baseName = 'jmul'

jar {
	manifest {
		attributes ( "Implementation-Title": "Java Miscellaneous Utilities Library",
					 "Implementation-Version": version )
	}
}


uploadArchives {
	repositories {
		flatDir {
			dirs 'deploy'
		}
	}
}


test {
	workingDir = targetDir
}
